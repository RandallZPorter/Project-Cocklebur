"
	Zane did this.
	Variable claims:
		a, b: addOne, subOne
		c, d: subtract, subtractAux, add, addAux
		e, f: divisable, divisableTRUE, divisableFALSE, divisableELSE, divisableLOOP
		g, h, i: prime, primeLOOP
		x: loop, loopPrint
"

"Increment top of stack push(pop() + 1)"
~@addOne
	~$a?
	~$a!#0!`?~$b?
	~$a!
	~$a!~$b!‽]addOne*
	~$a?
	~$b!
	;

"Decrement top of stack push(pop() - 1)"
~@subOne
	~$a?
    ~$a!#0!`?~$b?
    ~$a!
	~$a!~$b!‽[subOne*
    ~$a?
    ~$b!
	;

"subtract top two elements of stack push(pop() - pop()) "
~@subtractAux
	~$c?
	~$d?
	~$c!@subOne@~$c?
	~$d!@subOne@~$d?
	~$d!
	~$c!
	#0!~$d!‽(subtractAux*
	;
~@subtract
	@subtractAux@
	~$c?
	~$d?
	~$c!
	;

"add top two elements of stack push(pop() + pop()) "
~@addAux
	~$c?
	~$d?
	~$c!@addOne@~$c?
	~$d!@subOne@~$d?
	~$d!
	~$c!
	#0!~$d!‽(addAux*
	;
~@add
	@addAux@
	~$c?
	~$d?
	~$c!
	;

"push(pop() % pop() == 0) as 0 or 1"
~@divisableTRUE
	~$e?
	~$f?
	#1!
	;
~@divisableFALSE
	~$e?
	~$f?
	#0!
	;
~@divisableLOOP
	~$e?
	~$e!@subOne@~$e?
	~$e!	
	#0!~$e!‽(divisableLOOP*	
	;
~@divisableELSE
	~$e?
	~$f?
	~$f!
	~$e!
	`114?
	@divisableLOOP@
	~$e?
	~$e!
	~$e!
	#0!~$e!‽=divisableTRUE*
	#0!~$e!‽(divisableFALSE*
	#0!~$e!‽)divisableFALSE*
	;
~@divisable
	~$e?
	~$f?
	~$f!
	~$e!
	#0!~$f!‽=divisableTRUE*
	#1!~$f!‽=divisableTRUE*
	#1!~$f!‽(divisableELSE*
	;


"push(pop() is prime) as 0 or 1"
~@primeTRUE
	#1!
	;
~@primeFALSE
	#0!
	;
~@primeLOOP
	~$g?
	~$h?
	~$h!@addOne@~$h?
	~$h!
	~$g!
	~$h!~$g!@divisable@~$i?
	#0!~$i!‽=primeLOOP*
	;
~@prime
	~$g?
	#1!
	~$g!
	@primeLOOP@
	~$g?
	~$h?
	~$h!~$g!‽=primeTRUE*
	~$h!~$g!‽)primeFALSE*
	~$h!~$g!‽(primeFALSE*
	;

~@loopPRINT
	~$x!!v
	;
~@loop
	~$x?
	~$x!@prime@#1!‽=loopPRINT*
	~$x!@addOne@@addOne@~$x?
	~$x!
	@loop@
	;

~@,
	#2!!v
	#3!
	@loop@
	;


